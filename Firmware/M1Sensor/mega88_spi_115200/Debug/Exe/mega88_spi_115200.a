;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : PAPI sensor
;Version : Final
;Date    : 3/12/2018
;Author  :
;Company :
;Comments:
;BAUD = 115200;
;Send CALI to calibrate the sensors, offset value is saved to eeprom after calibrate
;If eeprom is bad, LED is always light
;Mat 1 ky tu cuoi khi send uart do tx rs485
;Chip type               : ATmega88PA
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega88a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include "mega88PapiSenConf.h"

	.DSEG

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;	mea -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0

	.DSEG

	.CSEG
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;	mea -> Y+0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0

	.DSEG

	.CSEG
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;	b1 -> Y+5
;	b2 -> Y+4
;	donvi -> R16,R17
;	hangchuc -> R18,R19
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;	data -> R17
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
	cli
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
	sei
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;	c -> Y+0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
	cli
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
	sei
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
	sei
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;#include "SimpleKalmanFilter.h"
;#include <delay.h>
;// Standard Input/Output functions
;#include <stdio.h>
;// SPI functions
;#include <spi.h>
;// Declare your global variables here
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0028 {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0029 // Reinitialize Timer 0 value
; 0000 002A TCNT0=0x06;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 002B // Place your code here
; 0000 002C if(usart_time_out > ONTIME) usart_time_out--;
;PCODE: $00000158 VOL: 1
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 1
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 002D if(send_sensor_info > ONTIME) send_sensor_info--;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 1
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 1
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 002E if(count_cali > ONTIME) count_cali--;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 1
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 1
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 002F }
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;
;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0035 {
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0036 char status,data;
; 0000 0037 status=UCSR0A;
;PCODE: $00000175 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0038 data=UDR0;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0039 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 003A    {
; 0000 003B    usart_time_out=10;// 10ms after the last character received will processing  rx_buffer0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 1
; 0000 003C    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 003D #if RX_BUFFER_SIZE0 == 256
; 0000 003E    // special case for receiver buffer size=256
; 0000 003F    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0040 #else
; 0000 0041    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0042    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0043       {
; 0000 0044       rx_counter0=0;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0045       rx_buffer_overflow0=1;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0046       }
; 0000 0047 #endif
; 0000 0048    }
;PCODE: $00000195 VOL: 0
; 0000 0049 }
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;
;
;
;
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0051 {
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0052 if (tx_counter0)
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0053    {
; 0000 0054    --tx_counter0;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0055    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0056 #if TX_BUFFER_SIZE0 != 256
; 0000 0057    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0058 #endif
; 0000 0059    }
;PCODE: $000001B0 VOL: 0
; 0000 005A if (!tx_counter0) RS485_TX(0);//Turn RS485 TX to RS485 RX
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 005B }
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;
;
;
;
;
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0065 {
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0066 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $000001BD VOL: 0
;	adc_input -> Y+0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0067 // Delay needed for the stabilization of the ADC input voltage
; 0000 0068 delay_us(10);
;PCODE: $000001C1 VOL: 0
; 0000 0069 // Start the AD conversion
; 0000 006A ADCSRA|=(1<<ADSC);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 006B // Wait for the AD conversion to complete
; 0000 006C while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 006D ADCSRA|=(1<<ADIF);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 006E return ADCW;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 006F }
;PCODE: $000001D1 VOL: 0
;
;void get_sensor_data(void)
; 0000 0072 {
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0073       DS18B20_WriteFunc(DS1820_CMD_CONVERTTEMP);  // Khoi dong qua trinh do va chuyen doi nhiet do ra so nhi phan
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0074       delay_us(200);
;PCODE: $000001D6 VOL: 0
; 0000 0075       DS18B20_WriteFunc(DS1820_CMD_READSCRPAD);   // Doc du lieu tu bo nho DS18b20
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0076 
; 0000 0077       buff_temp1 = DS18B20_ReadByte();
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0078       buff_temp2 = DS18B20_ReadByte();
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0079       ds_temp = cal_tempu(buff_temp1,buff_temp2);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 007A       newavgx = read_SCA100TX();
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 007B       avgx = X_updateEstimate(newavgx);
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 007C       newavgy = read_SCA100TY();
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 007D       avgy = Y_updateEstimate(newavgy);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 007E       lux = read_adc(3);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 007F       lux = (int)(updateEstimate(lux));
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0080 }
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;void main(void)
; 0000 0082 {
;PCODE: $000001FB VOL: 0
; 0000 0083 // Declare your local variables here
; 0000 0084 
; 0000 0085 // Crystal Oscillator division factor: 1
; 0000 0086 #pragma optsize-
; 0000 0087 CLKPR=(1<<CLKPCE);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0088 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0089 #ifdef _OPTIMIZE_SIZE_
; 0000 008A #pragma optsize+
; 0000 008B #endif
; 0000 008C 
; 0000 008D init_hw();
;PCODE: $00000200 VOL: 0
; 0000 008E RS485_TX(1);
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 008F printf("PAPI sensor \r\n");
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0090 if((check_eep1 =='O')&&(check_eep2 =='K'))//eeprom is good
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0091 {
; 0000 0092  RS485_TX(1);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0093  printf("EEPROM is good! Offset x,y:%d,%d\r\n ",osrawx,osrawy);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0094 }
; 0000 0095 else
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0096 {
; 0000 0097  RS485_TX(1);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0098  printf("EEPROM is BAD! Offset x,y:%d,%d\r\n ",osrawx,osrawy);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0099 
; 0000 009A }
;PCODE: $0000023A VOL: 0
; 0000 009B 
; 0000 009C DS18B20_Init();
;PCODE: $0000023B VOL: 0
; 0000 009D DS18B20_Config(15,40,DS18B20_9BIT_RES); // Cau hinh cho DS18B20
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 009E 
; 0000 009F count = 0 ;
;PCODE: $00000242 VOL: 0
; 0000 00A0 //avgx = read_SCA100TX();
; 0000 00A1 //avgy = read_SCA100TY();
; 0000 00A2 SimpleKalmanFilter(2.0,2.0,0.01);
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 00A3 get_sensor_data();
;PCODE: $00000249 VOL: 0
; 0000 00A4 get_sensor_data();
;PCODE: $0000024A VOL: 0
; 0000 00A5 get_sensor_data();
;PCODE: $0000024B VOL: 0
; 0000 00A6 get_sensor_data();
;PCODE: $0000024C VOL: 0
; 0000 00A7 get_sensor_data();
;PCODE: $0000024D VOL: 0
; 0000 00A8 get_sensor_data();
;PCODE: $0000024E VOL: 0
; 0000 00A9 get_sensor_data();
;PCODE: $0000024F VOL: 0
; 0000 00AA get_sensor_data();
;PCODE: $00000250 VOL: 0
; 0000 00AB get_sensor_data();
;PCODE: $00000251 VOL: 0
; 0000 00AC get_sensor_data();
;PCODE: $00000252 VOL: 0
; 0000 00AD while (1)
;PCODE: $00000253 VOL: 0
; 0000 00AE       {
; 0000 00AF       // Place your code here
; 0000 00B0       //If eeprom is bad, LED is always light
; 0000 00B1       if((check_eep1 !='O')&&(check_eep2 !='K'))//eeprom is good
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 00B2       {
; 0000 00B3         LED(1);
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 00B4       }
; 0000 00B5       if(send_sensor_info == ONTIME) {
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 1
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 00B6       //check all sensors after send_sensor_info time
; 0000 00B7         send_sensor_info = 100;//0.1s
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 1
; 0000 00B8         LED(1);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 00B9         count++;
;PCODE: $0000026A VOL: 0
; 0000 00BA         get_sensor_data();
;PCODE: $0000026B VOL: 0
; 0000 00BB         //tinh gia tri trung binh 10 lan do
; 0000 00BC         if(count == 10)
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 00BD         {
; 0000 00BE 
; 0000 00BF             count = 0;
;PCODE: $0000026F VOL: 0
; 0000 00C0             send_avgx = (avgx-osrawx)*5;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 00C1             send_avgy = (avgy-osrawy)*5;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 00C2             //>> du lieu da x5 => de ra goc thi chi can x7 vi 5x7 =35
; 0000 00C3             RS485_TX(1);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 00C4             //truyen thang gia tri co dau
; 0000 00C5             //printf("S>%d-%d-%d-%d<\r\n  ",(send_avgx),(send_avgy),cal_tempu(buff_temp1,buff_temp2),lux);
; 0000 00C6             printf("S>%04X-%04X-%03X-%03X<\r\n  ",(send_avgx),(send_avgy),cal_tempu(buff_temp1,buff_temp2),lux);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 00C7         }
; 0000 00C8         //RS485_TX(1);
; 0000 00C9         //truyen thang gia tri co dau
; 0000 00CA         //printf("S>%04X-%04X-%03X-%03X<\r\n  ",(send_avgx),(send_avgy),cal_tempu(buff_temp1,buff_temp2),lux);
; 0000 00CB         //printf("%d,%d\r\n ",lux,(int)(u_kalman));
; 0000 00CC         //ds_temp = cal_tempu(buff_temp1,buff_temp2);
; 0000 00CD         //printf("%d\r\n ",ds_temp);
; 0000 00CE         //printf("%d,%d\r\n ",newavgx,avgx);
; 0000 00CF         //printf("%d,%d,%d,%d\r\n ",avgx,avgy,ds_temp,(int)(u_kalman));
; 0000 00D0         LED(0);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 00D1       }
; 0000 00D2       if(usart_time_out == ONTIME) {
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 1
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 00D3         usart_time_out = STOPTHIS;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 1
; 0000 00D4         process_uart_mess();
;PCODE: $000002A1 VOL: 0
; 0000 00D5         //RS485_TX(1);
; 0000 00D6         //printf("????\r\n ");
; 0000 00D7       }
; 0000 00D8       if(cali_flag == ONTIME)//hieu chinh cam bien
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 00D9       {
; 0000 00DA         count_cali = 2000;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 1
; 0000 00DB         cali_flag = STOPTHIS;
;PCODE: $000002A8 VOL: 0
; 0000 00DC         LED(1);
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 00DD         send_sensor_info = STOPTHIS;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 1
; 0000 00DE         //RS485_TX(1);
; 0000 00DF         //printf("Begin cali\r\n ");
; 0000 00E0         check_eep1 = '?';
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 00E1         check_eep2 = '?';
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 00E2         delay_ms(100);
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 00E3       };
;PCODE: $000002B6 VOL: 0
; 0000 00E4       if(count_cali > ONTIME)
;PCODE: $000002B7 VOL: 1
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 00E5       {
; 0000 00E6         delay_ms(1000);
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 00E7         get_sensor_data();delay_ms(100);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 00E8         get_sensor_data();delay_ms(100);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 00E9         get_sensor_data();delay_ms(100);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 00EA         get_sensor_data();delay_ms(100);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 00EB         get_sensor_data();delay_ms(100);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 00EC         get_sensor_data();delay_ms(100);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 00ED         get_sensor_data();delay_ms(100);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 00EE         get_sensor_data();delay_ms(100);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 00EF         get_sensor_data();delay_ms(100);
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 00F0         get_sensor_data();delay_ms(100);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 00F1         osrawx = avgx;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 00F2         osrawy = avgy;
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 00F3         count_cali = ONTIME;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 1
; 0000 00F4         RS485_TX(1);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 00F5         printf("Offset done! x,y:%d,%d\r\n ",osrawx,osrawy);
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 00F6         check_eep1 = 'O';
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 00F7         check_eep2 = 'K';
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 00F8       };
;PCODE: $00000303 VOL: 0
; 0000 00F9 
; 0000 00FA       if(count_cali == ONTIME)
;PCODE: $00000304 VOL: 1
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 00FB       {
; 0000 00FC         count_cali= STOPTHIS;
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 1
; 0000 00FD         LED(0);
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 00FE         send_sensor_info = 100;
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 1
; 0000 00FF 
; 0000 0100         if( check_eep1 != 'O'){
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 0101         RS485_TX(1);
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0102         printf("Cannot offset x,y:%d,%d\r\n ",osrawx,osrawy); }
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 0103 
; 0000 0104 
; 0000 0105       }
;PCODE: $00000322 VOL: 0
; 0000 0106       //delay_ms(200);
; 0000 0107       }
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0108 }
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;
;
;
;
;
;unsigned int read_SCA100TX(void){
; 0000 010E unsigned int read_SCA100TX(void){
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 010F   unsigned int result = 0;
; 0000 0110   result=read_SCA100TXY(RDAX);
;PCODE: $0000032B VOL: 0
;	result -> R16,R17
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 0111   return(result);
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 0112 }
;PCODE: $00000334 VOL: 0
;
;unsigned int read_SCA100TY(void){
; 0000 0114 unsigned int read_SCA100TY(void){
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 0115   unsigned int result = 0;
; 0000 0116   result=read_SCA100TXY(RDAY);
;PCODE: $00000337 VOL: 0
;	result -> R16,R17
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 0117   return(result);
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 0118 }
;PCODE: $00000340 VOL: 0
;
;//Read SCA100TXY from the SCA100T
;unsigned int read_SCA100TXY(unsigned char thisValue){
; 0000 011B unsigned int read_SCA100TXY(unsigned char thisValue){
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 011C     unsigned char inByte = 0;           // incoming byte from the SPI
; 0000 011D     unsigned int result = 0;   // result to return
; 0000 011E 
; 0000 011F     // digitalWrite(chipSelectPin, LOW);
; 0000 0120     PORTB &= ~(1<<2);
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;	thisValue -> Y+4
;	inByte -> R17
;	result -> R18,R19
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 0121     //SPI.transfer(thisValue);
; 0000 0122     spi(thisValue);
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 0123     // delay(100);
; 0000 0124     result = spi(0);//SPI.transfer(0x00);
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 0125     inByte = spi(0);//SPI.transfer(0x00);
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 0126     //digitalWrite(chipSelectPin, HIGH);
; 0000 0127     PORTB |= (1<<2);
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 0128     result = result << 8;
;PCODE: $00000356 VOL: 0
; 0000 0129     result = result | inByte;
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 012A     result = result >> 5;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 012B     return(result);
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 012C 
; 0000 012D }
;PCODE: $00000363 VOL: 0
;//processing data from master, if received "CALI" => taking ofset for x,y
;void process_uart_mess()
; 0000 0130 {
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 0131     char usart_count;
; 0000 0132 
; 0000 0133     //RS485_TX(1);
; 0000 0134     //printf("%s\r\n ",rx_buffer0);
; 0000 0135     if((rx_buffer0[0]=='C')&&(rx_buffer0[1]=='A')&&(rx_buffer0[3]=='I'))
;PCODE: $00000366 VOL: 0
;	usart_count -> R17
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 0136     {
; 0000 0137     cali_flag=1;
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 0138                        /*
; 0000 0139     osrawx = rawx;
; 0000 013A     osrawy = rawy;
; 0000 013B     RS485_TX(1);
; 0000 013C     printf("Ofset x,y:%d,%d\r\n ",osrawx,osrawy);
; 0000 013D     check_eep1 = 'O';
; 0000 013E     check_eep2 = 'K';*/
; 0000 013F     }
; 0000 0140     //reset memorry
; 0000 0141     //memset(rx_buffer0,0,RX_BUFFER_SIZE0);
; 0000 0142     for(usart_count=0;usart_count<RX_BUFFER_SIZE0;usart_count++)
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0143                             {
; 0000 0144                             rx_buffer0[usart_count]=0                   ;
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 0145                             }
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 0146     rx_wr_index0=0;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 0147 }
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;
;/***********************************************************************************/
;/*-----------------------------------------------------------------------------
;Noi Dung    :   Doc 1 byte du lieu tu DS18B20 ra ngoai.
;Tham Bien   :   Khong.
;Tra Ve      :   Byte du lieu can doc.
;  -----------------------------------------------------------------------------*/
;
;
;unsigned char DS18B20_ReadByte(void)
; 0000 0152 {
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 0153     unsigned char i=0;
; 0000 0154     unsigned char data=0;
; 0000 0155 
; 0000 0156     for(i=8;i>0;i--)
;PCODE: $00000393 VOL: 0
;	i -> R17
;	data -> R16
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
; 0000 0157     {
; 0000 0158         //GPIO_SetState(GPIOA,GPIO_Pin_15,GPIO_Mode_Out_PP);   // Cau hinh chan DQ la OUPUT
; 0000 0159         DDRC.2 = 1;
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 015A         DS18B20_PORT_DQ_L;  // Keo chan DQ xuong muc '0'
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 015B         data>>=1;
;PCODE: $000003A5 VOL: 0
; 0000 015C         DS18B20_PORT_DQ_H;  // Keo chan DQ len muc '1'
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 015D         //GPIO_SetState(GPIOA,GPIO_Pin_15,GPIO_Mode_IPU);   // Cau hinh chan DQ la INPUT
; 0000 015E         DDRC.2 = 0;
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 015F         PORTC.2 =1;
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0160         if(PINC.2) data|=0x80;   // Nhan du lieu tra ve tu DS18B20
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 0161         delay_us(120);
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0000 0162     }
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 0163     return(data);
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 0164 }
;PCODE: $000003BB VOL: 0
;
;/*-----------------------------------------------------------------------------
;Noi Dung    :   Viet 1 byte du lieu vao DS18B20.
;Tham Bien   :   data: Byte du lieu can viet vao.
;Tra Ve      :   Khong.
;  -----------------------------------------------------------------------------*/
;
;void DS18B20_WriteByte(unsigned char data)
; 0000 016D {
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 016E     unsigned char i=0;
; 0000 016F     //GPIO_SetState(GPIOA,GPIO_Pin_15,GPIO_Mode_Out_PP);   // Cau hinh chan DQ la OUTPUT
; 0000 0170     DDRC.2 = 1;
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;	data -> Y+1
;	i -> R17
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 0171     for (i=8;i>0;i--)
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 0172     {
; 0000 0173         DS18B20_PORT_DQ_L;  // Keo chan DQ xuong muc '0'
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 0174         //DS18B20_PORT_DQ=(data&0x01); // Viet du lieu vao DS18B20
; 0000 0175                 if(data&0x01) DS18B20_PORT_DQ_H;
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 0176                 if(!(data&0x01)) DS18B20_PORT_DQ_L;
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 0177         delay_us(60);
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 0178         DS18B20_PORT_DQ_H;  // Keo chan DQ len muc '1'
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 0179         data>>=1;
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 017A     }
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 017B }
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;
;/*-----------------------------------------------------------------------------
;Noi Dung    :   Khoi tao DS18B20.
;Tham Bien   :   Khong.
;Tra Ve      :   Gia tri tra ve khi khoi tao xong cua DS18B20 (bit).
;  -----------------------------------------------------------------------------*/
;
;void DS18B20_Init(void)
; 0000 0184 {
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 0185     //GPIO_SetState(GPIOA,GPIO_Pin_15,GPIO_Mode_Out_PP);   // Cau hinh chan DQ la OUTPUT
; 0000 0186     DDRC.2 = 1;
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0000 0187     DS18B20_PORT_DQ_L;  // Keo DQ xuong muc '0' trong khoang 480us
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0000 0188     delay_us(500);
;PCODE: $000003F1 VOL: 0
; 0000 0189     //GPIO_SetState(GPIOA,GPIO_Pin_15,GPIO_Mode_IPU);   // Cau hinh chan DQ la INPUT trong khoang 480us
; 0000 018A     DDRC.2 = 0;
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 018B     PORTC.2 =1;
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 018C     delay_us(500);
;PCODE: $000003F6 VOL: 0
; 0000 018D }
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;
;/*-----------------------------------------------------------------------------
;Noi Dung    :   Ghi 1 byte lenh chuc nang vao DS18B20.
;Tham Bien   :   byte_func: byte lenh chuc nang cua DS18B20.
;Tra Ve      :   Khong.
;  -----------------------------------------------------------------------------*/
;
;void DS18B20_WriteFunc(unsigned char byte_func)
; 0000 0196 {
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 0197     DS18B20_Init();                 // Khoi tao DS18B20
;PCODE: $000003FB VOL: 0
;	byte_func -> Y+0
;PCODE: $000003FC VOL: 0
; 0000 0198     DS18B20_WriteByte(DS1820_CMD_SKIPROM);  // Truy cap thang den cac lenh chuc nang bo nho cua DS18B20
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 0199     DS18B20_WriteByte(byte_func);   // Viet ma lenh chuc nang
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 019A }
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;
;/*-----------------------------------------------------------------------------
;Noi Dung    :   Cau hinh cho DS18B20.
;Tham Bien   :   temp_low: Gia tri nhiet do thap nhat de dua ra canh bao.
;                temp_high: Gia tri nhiet do cao nhat de dua ra canh bao.
;                resolution: Do phan giai cho DS18B20.(1|R1|R0|1|1|1|1|1)
;Tra Ve      :   Khong.
;  -----------------------------------------------------------------------------*/
;
;void DS18B20_Config(unsigned char temp_low, unsigned char temp_high, unsigned char resolution)
; 0000 01A5 {
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 01A6     resolution = (resolution<<5)|0x1f;
;PCODE: $00000406 VOL: 0
;	temp_low -> Y+2
;	temp_high -> Y+1
;	resolution -> Y+0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 01A7     DS18B20_WriteFunc(DS1820_CMD_WRITESCRPAD);        // Cho phep ghi 3 byte vao bo nho nhap:
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 01A8     DS18B20_WriteByte(temp_high);   // byte 2: Th
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 01A9     DS18B20_WriteByte(temp_low);    // byte 3: Tl
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 01AA     DS18B20_WriteByte(resolution);  // byte 4: configuration register
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 01AB     DS18B20_WriteFunc(DS1820_CMD_COPYSCRPAD);        // Ghi vao EEPROM
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 01AC }
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;
;/*-----------------------------------------------------------------------------
;Noi Dung    :   Doc gia tri nhiet do do duoc cua DS18B20.
;Tham Bien   :   Khong.
;Tra Ve      :   Gia tri nhiet do do duoc.
;  -----------------------------------------------------------------------------*/
;
;//float DS18B20_ReadTemp(void)
;//{
;//    float temp;
;//    unsigned char buff_temp1,buff_temp2;
;//
;//    DS18B20_WriteFunc(DS1820_CMD_CONVERTTEMP);  // Khoi dong qua trinh do va chuyen doi nhiet do ra so nhi phan
;//    delay_us(200);
;//    DS18B20_WriteFunc(DS1820_CMD_READSCRPAD);   // Doc du lieu tu bo nho DS18b20
;//
;//    buff_temp1 = DS18B20_ReadByte();
;//    temp=((float)(buff_temp1&0x0f))/16;            // Lay phan thuc cua gia tri nhiet do
;//    buff_temp2 = DS18B20_ReadByte();
;//    buff_temp1 =((buff_temp1&0xf0)>>4)|((buff_temp2&0x0f)<<4) ;    // Lay phan nguyen cua gia tri nhiet do
;//    temp=temp+buff_temp1;
;//    return temp;
;//}
